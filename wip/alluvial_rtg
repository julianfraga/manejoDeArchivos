#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Aug  6 19:09:29 2023

@author: julian
"""
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.graph_objs as go
from app import app
import pandas as pd
import numpy as np
import textwrap
from txt import *
from config import *
import seaborn as sns
import os.path
from plotly.offline import plot
from PIL import ImageColor

def getColor(candidato, diccionario):
    color = diccionario[candidato]
    return(color)

#%%
# Obtener opciones únicas para OPCION1 y OPCION2
archivo = '/home/julian/trabajo/updates/corte 205/tigre/drive-download-20230806T210651Z-001/alluvial/tabla_INTENDENTE_CORTA_1_INTENDENTE_CORTA_2.csv'
df = pd.read_csv(archivo)
paletas = {'Galmarini': colores["peronismo"],
                    'Zamora': colores["peronismo2"], 
                    'Cufré': colores["cambiemos"],
                    'Cernadas': colores["cambiemos2"],
                    'Baumgarten': colores["liberales"],
                    'Izquierda': colores["izquierda"], 
                    'Otros': colores["otros"], 
                    'No sabe': colores["nosabe"]}
# df['OPCION1'] = pd.Categorical(df['OPCION1'], list(paletas))
# df['OPCION2'] = pd.Categorical(df['OPCION2'], list(paletas))
# df.sort_values(['OPCION1', 'OPCION2'], inplace = True)
# df.reset_index(drop=True, inplace= True)
# df['OPCION1'] = df['OPCION1'].astype(str)
# df['OPCION2'] = df['OPCION2'].astype(str)

df['color'] = ''
for index, row in df.iterrows():
    candidato = row.OPCION1
    df.at[index, 'color'] =  ImageColor.getcolor(getColor(candidato, paletas), "RGBA")
opciones1 = df["OPCION1"].unique()
opciones2 = df["OPCION2"].unique()

# Crear listas para los nodos y las fuentes de flujo
nodos = opciones1.tolist() + opciones2.tolist()
colores_nodos = [colores_alluvial[candidato] for candidato in nodos]
# colores_nodos = list(colores_alluvial.values())
fuentes = []

# Crear una lista de tuplas (fuente, destino, valor) para representar los flujos
for i, opcion1 in enumerate(opciones1):
    for j, opcion2 in enumerate(opciones2):
        valor = df[(df["OPCION1"] == opcion1) & (df["OPCION2"] == opcion2)]["Freq"].sum()
        RGBA = df[(df["OPCION1"] == opcion1) & (df["OPCION2"] == opcion2)]["color"].sum()
        if valor > 0:
            fuentes.append((i, len(opciones1) + j, valor, RGBA))

x_pos_ = [0]*len(opciones1)+[1]*len(opciones2)
y_pos_ = list(np.linspace(0,1, num = len(opciones1), endpoint = True))+list(np.linspace(0,1, num = len(opciones2), endpoint = True))
x_pos = [.001 if v==0 else .999 if v==1 else v for v in x_pos_]
y_pos = [.001 if v==0 else .999 if v==1 else v for v in y_pos_]

mynode = dict(
            thickness=20,
            line=dict(color="black", width=0.5),
            label=nodos,
            color = colores_nodos,
            x = x_pos,
            y = y_pos
            )
opacidad = 0.3
mylinks = dict(
            source=[x[0] for x in fuentes],
            target = [x[1] for x in fuentes],
            value=[x[2] for x in fuentes],
            color = [f'rgba{(*x[3][0:3],opacidad)}' for x in fuentes]
            )

# Crear el diagrama Alluvial
fig = go.Figure(data=[go.Sankey(
    arrangement="snap",                                
    node= mynode,
    link=mylinks
)])

# Actualizar el layout del diagrama
fig.update_layout(
    title_text="Gráfico de Alluvium con Plotly",
    font_size=20
)
# Mostrar el gráfico
plot(fig)
